
LCD_DISPLAY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080008c  0080008c  000005b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfd  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000680  00000000  00000000  0000136d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053a  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d6  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004dc  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002876  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__ctors_end>
   4:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
   8:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
   c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  10:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  14:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  18:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  1c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  20:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  24:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  28:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  30:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  34:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  38:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  3c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  40:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  44:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  4c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  50:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__bad_interrupt>
  54:	72 01       	movw	r14, r4
  56:	7e 01       	movw	r14, r28
  58:	32 02       	muls	r19, r18
  5a:	8a 01       	movw	r16, r20
  5c:	32 02       	muls	r19, r18
  5e:	32 02       	muls	r19, r18
  60:	32 02       	muls	r19, r18
  62:	96 01       	movw	r18, r12
  64:	32 02       	muls	r19, r18
  66:	32 02       	muls	r19, r18
  68:	32 02       	muls	r19, r18
  6a:	32 02       	muls	r19, r18
  6c:	32 02       	muls	r19, r18
  6e:	32 02       	muls	r19, r18
  70:	32 02       	muls	r19, r18
  72:	32 02       	muls	r19, r18
  74:	a2 01       	movw	r20, r4
  76:	ae 01       	movw	r20, r28
  78:	32 02       	muls	r19, r18
  7a:	ba 01       	movw	r22, r20
  7c:	32 02       	muls	r19, r18
  7e:	32 02       	muls	r19, r18
  80:	32 02       	muls	r19, r18
  82:	c6 01       	movw	r24, r12
  84:	32 02       	muls	r19, r18
  86:	32 02       	muls	r19, r18
  88:	32 02       	muls	r19, r18
  8a:	32 02       	muls	r19, r18
  8c:	32 02       	muls	r19, r18
  8e:	32 02       	muls	r19, r18
  90:	32 02       	muls	r19, r18
  92:	32 02       	muls	r19, r18
  94:	32 02       	muls	r19, r18
  96:	32 02       	muls	r19, r18
  98:	32 02       	muls	r19, r18
  9a:	32 02       	muls	r19, r18
  9c:	32 02       	muls	r19, r18
  9e:	32 02       	muls	r19, r18
  a0:	32 02       	muls	r19, r18
  a2:	32 02       	muls	r19, r18
  a4:	32 02       	muls	r19, r18
  a6:	32 02       	muls	r19, r18
  a8:	32 02       	muls	r19, r18
  aa:	32 02       	muls	r19, r18
  ac:	32 02       	muls	r19, r18
  ae:	32 02       	muls	r19, r18
  b0:	32 02       	muls	r19, r18
  b2:	32 02       	muls	r19, r18
  b4:	d2 01       	movw	r26, r4
  b6:	de 01       	movw	r26, r28
  b8:	32 02       	muls	r19, r18
  ba:	ea 01       	movw	r28, r20
  bc:	32 02       	muls	r19, r18
  be:	32 02       	muls	r19, r18
  c0:	32 02       	muls	r19, r18
  c2:	f6 01       	movw	r30, r12
  c4:	32 02       	muls	r19, r18
  c6:	32 02       	muls	r19, r18
  c8:	32 02       	muls	r19, r18
  ca:	32 02       	muls	r19, r18
  cc:	32 02       	muls	r19, r18
  ce:	32 02       	muls	r19, r18
  d0:	32 02       	muls	r19, r18
  d2:	32 02       	muls	r19, r18
  d4:	32 02       	muls	r19, r18
  d6:	32 02       	muls	r19, r18
  d8:	32 02       	muls	r19, r18
  da:	32 02       	muls	r19, r18
  dc:	32 02       	muls	r19, r18
  de:	32 02       	muls	r19, r18
  e0:	32 02       	muls	r19, r18
  e2:	32 02       	muls	r19, r18
  e4:	32 02       	muls	r19, r18
  e6:	32 02       	muls	r19, r18
  e8:	32 02       	muls	r19, r18
  ea:	32 02       	muls	r19, r18
  ec:	32 02       	muls	r19, r18
  ee:	32 02       	muls	r19, r18
  f0:	32 02       	muls	r19, r18
  f2:	32 02       	muls	r19, r18
  f4:	32 02       	muls	r19, r18
  f6:	32 02       	muls	r19, r18
  f8:	32 02       	muls	r19, r18
  fa:	32 02       	muls	r19, r18
  fc:	32 02       	muls	r19, r18
  fe:	32 02       	muls	r19, r18
 100:	32 02       	muls	r19, r18
 102:	32 02       	muls	r19, r18
 104:	32 02       	muls	r19, r18
 106:	32 02       	muls	r19, r18
 108:	32 02       	muls	r19, r18
 10a:	32 02       	muls	r19, r18
 10c:	32 02       	muls	r19, r18
 10e:	32 02       	muls	r19, r18
 110:	32 02       	muls	r19, r18
 112:	32 02       	muls	r19, r18
 114:	32 02       	muls	r19, r18
 116:	32 02       	muls	r19, r18
 118:	32 02       	muls	r19, r18
 11a:	32 02       	muls	r19, r18
 11c:	32 02       	muls	r19, r18
 11e:	32 02       	muls	r19, r18
 120:	32 02       	muls	r19, r18
 122:	32 02       	muls	r19, r18
 124:	32 02       	muls	r19, r18
 126:	32 02       	muls	r19, r18
 128:	32 02       	muls	r19, r18
 12a:	32 02       	muls	r19, r18
 12c:	32 02       	muls	r19, r18
 12e:	32 02       	muls	r19, r18
 130:	32 02       	muls	r19, r18
 132:	32 02       	muls	r19, r18
 134:	02 02       	muls	r16, r18
 136:	0e 02       	muls	r16, r30
 138:	32 02       	muls	r19, r18
 13a:	1a 02       	muls	r17, r26
 13c:	32 02       	muls	r19, r18
 13e:	32 02       	muls	r19, r18
 140:	32 02       	muls	r19, r18
 142:	26 02       	muls	r18, r22

00000144 <__ctors_end>:
 144:	11 24       	eor	r1, r1
 146:	1f be       	out	0x3f, r1	; 63
 148:	cf e5       	ldi	r28, 0x5F	; 95
 14a:	d8 e0       	ldi	r29, 0x08	; 8
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	a0 e6       	ldi	r26, 0x60	; 96
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	e2 ef       	ldi	r30, 0xF2	; 242
 158:	f4 e0       	ldi	r31, 0x04	; 4
 15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x10>
 15c:	05 90       	lpm	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	ac 38       	cpi	r26, 0x8C	; 140
 162:	b1 07       	cpc	r27, r17
 164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0xc>

00000166 <__do_clear_bss>:
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	ac e8       	ldi	r26, 0x8C	; 140
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
 16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
 170:	a0 39       	cpi	r26, 0x90	; 144
 172:	b2 07       	cpc	r27, r18
 174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>
 176:	0e 94 67 02 	call	0x4ce	; 0x4ce <main>
 17a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <_exit>

0000017e <__bad_interrupt>:
 17e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000182 <write_LCD>:
	//_delay_ms(1);
}

//Used for communicate with LCD device
void write_LCD(unsigned char data, RS_t type){
	PORTB = data;
 182:	88 bb       	out	0x18, r24	; 24
	if(type == SEND_COMMAND){	//command
 184:	61 11       	cpse	r22, r1
 186:	02 c0       	rjmp	.+4      	; 0x18c <write_LCD+0xa>
		PORTA &= ~(1<<RS);
 188:	de 98       	cbi	0x1b, 6	; 27
 18a:	01 c0       	rjmp	.+2      	; 0x18e <write_LCD+0xc>
	}
	else{	//data
		PORTA |= (1<<RS);
 18c:	de 9a       	sbi	0x1b, 6	; 27
	}
	PORTA |= (1<<E);	//enable receive data or command
 18e:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	83 ed       	ldi	r24, 0xD3	; 211
 192:	90 e3       	ldi	r25, 0x30	; 48
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <write_LCD+0x12>
 198:	00 c0       	rjmp	.+0      	; 0x19a <write_LCD+0x18>
 19a:	00 00       	nop
	_delay_ms(50);
	PORTA &= ~(1<<E);	//lock
 19c:	dd 98       	cbi	0x1b, 5	; 27
	PORTB = 0x00;	
 19e:	18 ba       	out	0x18, r1	; 24
 1a0:	08 95       	ret

000001a2 <write_LCD_string>:
}

void write_LCD_string(char *string_of_characters){
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
	while(*string_of_characters > 0){
 1a8:	88 81       	ld	r24, Y
 1aa:	88 23       	and	r24, r24
 1ac:	39 f0       	breq	.+14     	; 0x1bc <write_LCD_string+0x1a>
 1ae:	21 96       	adiw	r28, 0x01	; 1
		write_LCD(*string_of_characters++,SEND_DATA);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
	PORTA &= ~(1<<E);	//lock
	PORTB = 0x00;	
}

void write_LCD_string(char *string_of_characters){
	while(*string_of_characters > 0){
 1b6:	89 91       	ld	r24, Y+
 1b8:	81 11       	cpse	r24, r1
 1ba:	fa cf       	rjmp	.-12     	; 0x1b0 <write_LCD_string+0xe>
		write_LCD(*string_of_characters++,SEND_DATA);
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <read_keypad>:
 1c2:	89 ef       	ldi	r24, 0xF9	; 249
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <read_keypad+0x4>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <read_keypad+0xa>
 1cc:	00 00       	nop

//Used to read keypad input data.
//NOTE: short press (about 10ms) will output character on LCD screen. Press and hold the button to output repeat character on LCD
void read_keypad(){
	_delay_ms(1);
	LCD.keypressed = ((PIND ^ 0xFF) & 0x0F);	//pin data (row)
 1ce:	80 b3       	in	r24, 0x10	; 16
 1d0:	ec e8       	ldi	r30, 0x8C	; 140
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 95       	com	r24
 1d6:	8f 70       	andi	r24, 0x0F	; 15
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	93 83       	std	Z+3, r25	; 0x03
 1dc:	82 83       	std	Z+2, r24	; 0x02
	DDRD ^= 0xFF;
 1de:	81 b3       	in	r24, 0x11	; 17
 1e0:	80 95       	com	r24
 1e2:	81 bb       	out	0x11, r24	; 17
 1e4:	89 ef       	ldi	r24, 0xF9	; 249
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <read_keypad+0x26>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <read_keypad+0x2c>
 1ee:	00 00       	nop
	_delay_ms(1);
	PORTD ^= 0xFF;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	80 95       	com	r24
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	89 ef       	ldi	r24, 0xF9	; 249
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <read_keypad+0x38>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <read_keypad+0x3e>
 200:	00 00       	nop
	_delay_ms(1);
	LCD.keypressed |= ((PIND ^ 0xFF) & 0xF0);	//row data (column)
 202:	80 b3       	in	r24, 0x10	; 16
 204:	80 95       	com	r24
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	22 81       	ldd	r18, Z+2	; 0x02
 20a:	33 81       	ldd	r19, Z+3	; 0x03
 20c:	a9 01       	movw	r20, r18
 20e:	48 2b       	or	r20, r24
 210:	ca 01       	movw	r24, r20
 212:	93 83       	std	Z+3, r25	; 0x03
 214:	82 83       	std	Z+2, r24	; 0x02
 216:	08 95       	ret

00000218 <reset_keypad>:
}

void reset_keypad(){
	DDRD = 0xF0;
 218:	80 ef       	ldi	r24, 0xF0	; 240
 21a:	81 bb       	out	0x11, r24	; 17
 21c:	89 ef       	ldi	r24, 0xF9	; 249
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <reset_keypad+0x8>
 224:	00 c0       	rjmp	.+0      	; 0x226 <reset_keypad+0xe>
 226:	00 00       	nop
	_delay_ms(1);
	PORTD = 0x0F;
 228:	8f e0       	ldi	r24, 0x0F	; 15
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	89 ef       	ldi	r24, 0xF9	; 249
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <reset_keypad+0x18>
 234:	00 c0       	rjmp	.+0      	; 0x236 <reset_keypad+0x1e>
 236:	00 00       	nop
 238:	08 95       	ret

0000023a <Init>:
    }
}

//Used for initialize LCD and ATmega32 parameters.
void Init(){
	DDRB = 0xFF;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
 23e:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
 240:	81 bb       	out	0x11, r24	; 17
 242:	89 ef       	ldi	r24, 0xF9	; 249
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <Init+0xc>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <Init+0x12>
 24c:	00 00       	nop
	_delay_ms(1);
	PORTD = 0x00;
 24e:	12 ba       	out	0x12, r1	; 18
 250:	89 ef       	ldi	r24, 0xF9	; 249
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <Init+0x1a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <Init+0x20>
 25a:	00 00       	nop
 25c:	83 ed       	ldi	r24, 0xD3	; 211
 25e:	90 e3       	ldi	r25, 0x30	; 48
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <Init+0x26>
 264:	00 c0       	rjmp	.+0      	; 0x266 <Init+0x2c>
 266:	00 00       	nop
	_delay_ms(1);
	_delay_ms(50);
	LCD.key = 0;
 268:	ec e8       	ldi	r30, 0x8C	; 140
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	11 82       	std	Z+1, r1	; 0x01
 26e:	10 82       	st	Z, r1
	LCD.keypressed = 0;
 270:	13 82       	std	Z+3, r1	; 0x03
 272:	12 82       	std	Z+2, r1	; 0x02
	write_LCD(0x01,SEND_COMMAND);	//clear screen
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
 27c:	83 ed       	ldi	r24, 0xD3	; 211
 27e:	90 e3       	ldi	r25, 0x30	; 48
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <Init+0x46>
 284:	00 c0       	rjmp	.+0      	; 0x286 <Init+0x4c>
 286:	00 00       	nop
	_delay_ms(50);
	write_LCD(0x38,SEND_COMMAND);	//set mode: 8 bit command data
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	88 e3       	ldi	r24, 0x38	; 56
 28c:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
 290:	83 ed       	ldi	r24, 0xD3	; 211
 292:	90 e3       	ldi	r25, 0x30	; 48
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <Init+0x5a>
 298:	00 c0       	rjmp	.+0      	; 0x29a <Init+0x60>
 29a:	00 00       	nop
	_delay_ms(50);
	write_LCD(0x0F,SEND_COMMAND);	//LCD screen on, cursor blink
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	8f e0       	ldi	r24, 0x0F	; 15
 2a0:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
 2a4:	83 ed       	ldi	r24, 0xD3	; 211
 2a6:	90 e3       	ldi	r25, 0x30	; 48
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <Init+0x6e>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <Init+0x74>
 2ae:	00 00       	nop
	_delay_ms(50);
	write_LCD_string("PRESS A KEY");
 2b0:	80 e6       	ldi	r24, 0x60	; 96
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
//	_delay_ms(50);
	write_LCD(0xC0,SEND_COMMAND);	// "\n"
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
	reset_keypad();
 2c0:	0e 94 0c 01 	call	0x218	; 0x218 <reset_keypad>
 2c4:	08 95       	ret

000002c6 <LCD_interface>:
	PORTD = 0x0F;
	_delay_ms(1);
}

//handles output data to LCD
void LCD_interface(){
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
	*		*	0	#	D
	*
	*	output to LCD based on LCD.keypressed value, LCD.keypressed: <column value (4 bit), row value (4 bit)>.
	*	example: 0x12 means column 1, row 2, means "4".
	*/
	switch (LCD.keypressed)	
 2ca:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <__data_end+0x2>
 2ce:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <__data_end+0x3>
 2d2:	71 97       	sbiw	r30, 0x11	; 17
 2d4:	e8 37       	cpi	r30, 0x78	; 120
 2d6:	f1 05       	cpc	r31, r1
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <LCD_interface+0x16>
 2da:	c4 c0       	rjmp	.+392    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 2dc:	e6 5d       	subi	r30, 0xD6	; 214
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__tablejump2__>
	{
	case 0x11:
	write_LCD_string("1");
 2e4:	8c e6       	ldi	r24, 0x6C	; 108
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 2ec:	ec e8       	ldi	r30, 0x8C	; 140
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	91 83       	std	Z+1, r25	; 0x01
 2f8:	80 83       	st	Z, r24
	break;
 2fa:	b7 c0       	rjmp	.+366    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x12:
	write_LCD_string("4");
 2fc:	8e e6       	ldi	r24, 0x6E	; 110
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 304:	ec e8       	ldi	r30, 0x8C	; 140
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	91 83       	std	Z+1, r25	; 0x01
 310:	80 83       	st	Z, r24
	break;
 312:	ab c0       	rjmp	.+342    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x14:
	write_LCD_string("7");
 314:	80 e7       	ldi	r24, 0x70	; 112
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 31c:	ec e8       	ldi	r30, 0x8C	; 140
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	91 83       	std	Z+1, r25	; 0x01
 328:	80 83       	st	Z, r24
	break;
 32a:	9f c0       	rjmp	.+318    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x18:
	write_LCD_string("*");
 32c:	82 e7       	ldi	r24, 0x72	; 114
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 334:	ec e8       	ldi	r30, 0x8C	; 140
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	91 81       	ldd	r25, Z+1	; 0x01
 33c:	01 96       	adiw	r24, 0x01	; 1
 33e:	91 83       	std	Z+1, r25	; 0x01
 340:	80 83       	st	Z, r24
	break;
 342:	93 c0       	rjmp	.+294    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x21:
	write_LCD_string("2");
 344:	84 e7       	ldi	r24, 0x74	; 116
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 34c:	ec e8       	ldi	r30, 0x8C	; 140
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	91 81       	ldd	r25, Z+1	; 0x01
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	91 83       	std	Z+1, r25	; 0x01
 358:	80 83       	st	Z, r24
	break;
 35a:	87 c0       	rjmp	.+270    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x22:
	write_LCD_string("5");
 35c:	86 e7       	ldi	r24, 0x76	; 118
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 364:	ec e8       	ldi	r30, 0x8C	; 140
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	91 81       	ldd	r25, Z+1	; 0x01
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
	break;
 372:	7b c0       	rjmp	.+246    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x24:
	write_LCD_string("8");
 374:	88 e7       	ldi	r24, 0x78	; 120
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 37c:	ec e8       	ldi	r30, 0x8C	; 140
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	91 81       	ldd	r25, Z+1	; 0x01
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	91 83       	std	Z+1, r25	; 0x01
 388:	80 83       	st	Z, r24
	break;
 38a:	6f c0       	rjmp	.+222    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x28:
	write_LCD_string("0");
 38c:	8a e7       	ldi	r24, 0x7A	; 122
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 394:	ec e8       	ldi	r30, 0x8C	; 140
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	91 81       	ldd	r25, Z+1	; 0x01
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	91 83       	std	Z+1, r25	; 0x01
 3a0:	80 83       	st	Z, r24
	break;
 3a2:	63 c0       	rjmp	.+198    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x41:
	write_LCD_string("3");
 3a4:	8c e7       	ldi	r24, 0x7C	; 124
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 3ac:	ec e8       	ldi	r30, 0x8C	; 140
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	91 83       	std	Z+1, r25	; 0x01
 3b8:	80 83       	st	Z, r24
	break;
 3ba:	57 c0       	rjmp	.+174    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x42:
	write_LCD_string("6");
 3bc:	8e e7       	ldi	r24, 0x7E	; 126
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 3c4:	ec e8       	ldi	r30, 0x8C	; 140
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	91 81       	ldd	r25, Z+1	; 0x01
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	91 83       	std	Z+1, r25	; 0x01
 3d0:	80 83       	st	Z, r24
	break;
 3d2:	4b c0       	rjmp	.+150    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x44:
	write_LCD_string("9");
 3d4:	80 e8       	ldi	r24, 0x80	; 128
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 3dc:	ec e8       	ldi	r30, 0x8C	; 140
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	91 83       	std	Z+1, r25	; 0x01
 3e8:	80 83       	st	Z, r24
	break;
 3ea:	3f c0       	rjmp	.+126    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x48:
	write_LCD_string("#");
 3ec:	82 e8       	ldi	r24, 0x82	; 130
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 3f4:	ec e8       	ldi	r30, 0x8C	; 140
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	91 81       	ldd	r25, Z+1	; 0x01
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	91 83       	std	Z+1, r25	; 0x01
 400:	80 83       	st	Z, r24
	break;
 402:	33 c0       	rjmp	.+102    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x81:
	write_LCD_string("A");
 404:	84 e8       	ldi	r24, 0x84	; 132
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 40c:	ec e8       	ldi	r30, 0x8C	; 140
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	91 83       	std	Z+1, r25	; 0x01
 418:	80 83       	st	Z, r24
	break;
 41a:	27 c0       	rjmp	.+78     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x82:
	write_LCD_string("B");
 41c:	86 e8       	ldi	r24, 0x86	; 134
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 424:	ec e8       	ldi	r30, 0x8C	; 140
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	91 81       	ldd	r25, Z+1	; 0x01
 42c:	01 96       	adiw	r24, 0x01	; 1
 42e:	91 83       	std	Z+1, r25	; 0x01
 430:	80 83       	st	Z, r24
	break;
 432:	1b c0       	rjmp	.+54     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x84:
	write_LCD_string("C");
 434:	88 e8       	ldi	r24, 0x88	; 136
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 43c:	ec e8       	ldi	r30, 0x8C	; 140
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	01 96       	adiw	r24, 0x01	; 1
 446:	91 83       	std	Z+1, r25	; 0x01
 448:	80 83       	st	Z, r24
	break;
 44a:	0f c0       	rjmp	.+30     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	case 0x88:
	write_LCD_string("D");
 44c:	8a e8       	ldi	r24, 0x8A	; 138
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
	LCD.key++;
 454:	ec e8       	ldi	r30, 0x8C	; 140
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	91 81       	ldd	r25, Z+1	; 0x01
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	91 83       	std	Z+1, r25	; 0x01
 460:	80 83       	st	Z, r24
	break;
 462:	03 c0       	rjmp	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	
	default:	//other cases are ignored. Here using a red LED to determine an invalid input.
	PORTA ^= (1<<7);
 464:	8b b3       	in	r24, 0x1b	; 27
 466:	80 58       	subi	r24, 0x80	; 128
 468:	8b bb       	out	0x1b, r24	; 27
	break;
	}
	
	LCD.keypressed = 0x00;
 46a:	cc e8       	ldi	r28, 0x8C	; 140
 46c:	d0 e0       	ldi	r29, 0x00	; 0
 46e:	1b 82       	std	Y+3, r1	; 0x03
 470:	1a 82       	std	Y+2, r1	; 0x02
	reset_keypad();
 472:	0e 94 0c 01 	call	0x218	; 0x218 <reset_keypad>
	
	//if LCD is full, clear the LCD.
	if(LCD.key > 16){
 476:	88 81       	ld	r24, Y
 478:	99 81       	ldd	r25, Y+1	; 0x01
 47a:	41 97       	sbiw	r24, 0x11	; 17
 47c:	e4 f0       	brlt	.+56     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		write_LCD(0x01,SEND_COMMAND);	//clear screen
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
 486:	83 ed       	ldi	r24, 0xD3	; 211
 488:	90 e3       	ldi	r25, 0x30	; 48
 48a:	01 97       	sbiw	r24, 0x01	; 1
 48c:	f1 f7       	brne	.-4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 48e:	00 c0       	rjmp	.+0      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 490:	00 00       	nop
		_delay_ms(50);
		write_LCD_string("PRESS A KEY");
 492:	80 e6       	ldi	r24, 0x60	; 96
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <write_LCD_string>
 49a:	83 ed       	ldi	r24, 0xD3	; 211
 49c:	90 e3       	ldi	r25, 0x30	; 48
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a4:	00 00       	nop
		_delay_ms(50);
		write_LCD(0xC0,SEND_COMMAND);	// "\n"
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	80 ec       	ldi	r24, 0xC0	; 192
 4aa:	0e 94 c1 00 	call	0x182	; 0x182 <write_LCD>
		LCD.key = 0;
 4ae:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <__data_end+0x1>
 4b2:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
 4b6:	9f e9       	ldi	r25, 0x9F	; 159
 4b8:	26 e8       	ldi	r18, 0x86	; 134
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	91 50       	subi	r25, 0x01	; 1
 4be:	20 40       	sbci	r18, 0x00	; 0
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	e1 f7       	brne	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c6:	00 00       	nop
	}
	
	//while((PINA & 0x0F) != 0x00);	//debounce
	_delay_ms(500);	//
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <main>:
void LCD_interface();

int main(void)
{
    /* Replace with your application code */
	Init();	
 4ce:	0e 94 1d 01 	call	0x23a	; 0x23a <Init>
	
    while (1) 
    {
		if(PIND != 0x0F){	//execute when a button on keypad is pressed
 4d2:	80 b3       	in	r24, 0x10	; 16
 4d4:	8f 30       	cpi	r24, 0x0F	; 15
 4d6:	e9 f3       	breq	.-6      	; 0x4d2 <main+0x4>
			read_keypad();
 4d8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <read_keypad>
			LCD_interface();
 4dc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_interface>
 4e0:	f8 cf       	rjmp	.-16     	; 0x4d2 <main+0x4>

000004e2 <__tablejump2__>:
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	05 90       	lpm	r0, Z+
 4e8:	f4 91       	lpm	r31, Z
 4ea:	e0 2d       	mov	r30, r0
 4ec:	09 94       	ijmp

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
